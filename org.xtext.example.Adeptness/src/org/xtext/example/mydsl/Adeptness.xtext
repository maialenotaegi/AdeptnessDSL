grammar org.xtext.example.mydsl.Adeptness with org.eclipse.xtext.common.Terminals

generate adeptness "http://www.xtext.org/example/mydsl/Adeptness"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Adeptness:
	(elements+=AbstractElement)*;

AbstractElement:
	PackageDeclaration | Type | Imports;

Imports:
	'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

Type:
	Signal | InferMonitoringFile | ModelFile | MonitoringFile 
;

InferMonitoringFile:
	'INFERENCEMONITORINGPLAN' name=ID ':' 'implements' (superType=[ModelFile|QualifiedName])
	(monitoringInferVariables+=MonitoringInferVariables)+
	'ENDINFERENCEMONITORINGPLAN';

ModelFile:
	'MODELFILE' name=ID ':' 'implements' (superType=[MonitoringFile|QualifiedName])
	((trainableModel+=TrainableModel) | (nonTrainableModel+=NonTrainableModel))+
	'ENDMODELFILE';

NonTrainableModel:
	'NONTRAINABLEMODEL' name=ID ':'
	'Independent' 'variables' ':' '[' (variables+=ID)+ ']'
	'Model' 'URL' ':' model=STRING
	'ENDNONTRAINABLEMODEL';

TrainableModel:
	'TRAINABLEMODEL' name=ID ':'
	'Independent' 'variables' ':' '[' (variables+=ID)+ ']'
	'Data' 'URL' ':' dataFile=STRING
	'Layers' ':' (layers+=Layer)+
	'EndLayers'
	'ENDTRAINABLEMODEL';

Layer:
	'Layer' name=ID ':'
	'type' ':' (dense=DenseType)
	'EndLayer';

DenseType:
	name='Dense'
	'units' ':' units=INT
	'activation' ':' activation=('deserializable' | 'elu' | 'exponential' | 'gelu' | 'get' | 'hard_sigmoid' | 'linear' |
	'relu' | 'selu' |
	'serializable' | 'sigmoid' | 'softmax' | 'softplus' | 'sofsign' | 'swish' | 'tanh');

MonitoringFile:
	'MONITORINGPLAN' name=ID ':'
	(monitoringPlan+=MonitoringPlan)+
	'ENDMONITORINGPLAN';

MonitoringPlan:
	monitoringVariables=MonitoringVariable;

MonitoringInferVariables:
	'MONITOR_INFERENCE' name=ID ':'
	'type' ':' (MonitoringVariableDatatype=Sig_type)
	('max' ':' max=DOUBLE
	'min' ':' min=DOUBLE)?
	'model' ':' model=ID
	'ENDMONITOR_INFERENCE';

MonitoringVariable:
	'MONITOR' name=ID ':'
	'type' ':' (MonitoringVariableDatatype=Sig_type)
	('max' ':' max=DOUBLE
	'min' ':' min=DOUBLE)?
	'ENDMONITOR';

Sig_type:
	((sig_type='boolean') | (sig_type='int') | (sig_type='double') | (sig_type='string'));

//Each signal could have more than one oracles
Signal:
	'CPS' name=ID ('[' cardinalityNumCPS=INT ']')? ':' 'implements' (superType=[MonitoringFile|QualifiedName]) ('and'
	superTypeInfer=[InferMonitoringFile|QualifiedName])?
	((oracle+=Oracle) | (customOracle+=CustomOracle))+ 'ENDCPS';

CustomOracle:
	'CUSTOMORACLE' name=ID ':'
	('precondition' ':' precondition=("while" | "when")
	'precondition' 'inputs' ':' '[' (predInputs+=ID)+ ']')?
	'checks' 'inputs' ':' '[' (checkInputs+=ID)+ ']'
	('description' ':' description=STRING)?
	'ENDCUSTOMORACLE';

Oracle:
	'ORACLE' name=ID ':'
	(when=When | while=While)?
	(check=Checks) 'ENDORACLE';

While:
	'while' ':' em=ExpressionsModel;

When:
	'when' ':' em=ExpressionsModel
	(aw=AfterWhen)?;

AfterWhen:
	(wait=Wait);

Wait:
	'after' ':' time=DOUBLE unit=TimeType;

Checks:
	'checks' ':' (name=ID | em=ExpressionsModel) 
	(reference=Reference)
	(failReason+=FailReason)+
	(description=Description)? 
;

Description:
	'description' ':' value=STRING;

FailReason:
	'fails' 'if' ':'
	(reason=Reason);

Reason:
	((highPeak=HighPeak) | (highTime=HighTime) | (constDeg=ConstDeg) | (xPeaks=XPeaks));

XPeaks:
	'confidence' 'is' 'below' (cant=DOUBLE) 'more' 'than' (nPeaks=DOUBLE) 'times' 'within' (time=DOUBLE) (unit=TimeType) 
;

ConstDeg:
	'confidence' 'is' 'in' 'constant' 'degradation' (cant=DOUBLE) 
;

HighTime:
	'confidence' 'is' 'below' (cant=DOUBLE) 'within' (time=DOUBLE) (unit=TimeType);

HighPeak:
	'confidence' 'is' 'below' (cant=DOUBLE);

Reference:
	((upper=Upper) | (lower=Lower) | (range=Range) | (gap=Gap) | (same=Same) | (notsame=NotSame));

Same:
	'should be' (bound_upp=Bound_up)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

NotSame:
	'should not be' (bound_upp=Bound_up)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

//Oracle for upper limit --> Below reference signal
Upper:
	'is' 'below' (bound_upp=Bound_up)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

//Oracle for lower limit --> Above reference signal
Lower:
	'is' 'above' (bound_lower=Bound_Down)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

//Oracle for Above and Below limit --> In range reference signal
Range:
	'is' 'in' 'range' 'between' (bound_lower=Bound_Down) 'and' (bound_upp=Bound_up)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

//Oracle for !Above and !Below limit --> Gap reference signal
Gap:
	'not' 'in' 'range' 'between' (bound_lower=Bound_Down) 'and' (bound_upp=Bound_up)
	((exactly=Exactly) | (atmost=At_most) | (atleast=At_least))?;

//exactly at a especified time
Exactly:
	'exactly'
	(time=DOUBLE) (unit=TimeType);

At_most:
	'at most'
	(time=DOUBLE) (unit=TimeType);

At_least:
	'at least'
	(time=DOUBLE) (unit=TimeType);

//Upper limit
Bound_up:
	(value=DOUBLE | em=ExpressionsModel);

//Lower limit
Bound_Down:
	(value=DOUBLE | em=ExpressionsModel);

//Double declaration
DOUBLE:
	dVal=d;

d returns ecore::EDouble:
	('-')? INT ('.'INT)?;

TimeType:
	((time='milliseconds') | (time='seconds') | (time='minutes') | (time='hours'));

//Package declaration
PackageDeclaration:
	'package' name=QualifiedName '{'
	(elements+=AbstractElement)*
	'}';

/*
 * MATH ELEMENTS
 */
ExpressionsModel:
	(elements+=AbstractElement2)*;

AbstractElement2:
	(frontParentheses+=FrontParentheses)*
	((name=ID) | (value=DOUBLE) | math=Math | (uncer1=UncertaintyProb) | (uncer2=UncertaintyVagueness) |
	(uncer3=UncertaintyAmbiguity))
	(op+=Operators)*;

FrontParentheses:
	"(";

BackParentheses:
	")";

Operators:
	(operator=Op | comparation=CompOp | logicOperator=LogicOp | backParentheses=BackParentheses);

CompOp:
	op=("==" | "!=" | ">=" | "<=" | "<" | ">");

LogicOp:
	op=("&&" | "||");

Op:
	op=("+" | "-" | "*" | "/");

Math:
	"Math." library=Library;

Library:
	(cos=cos | sin=sin | modulus=modulus | derivative=derivative);

cos:
	"cos";

sin:
	"sin";

modulus:
	"modulus";

derivative:
	"derivative";

UncertaintyProb:
	(normalDisstribution=NormalDistribution | bernoulliDistribution=BernoulliDistribution
	| gammaDistribution=GammaDistribution | uniformDistribution=UniformDistribution | percentage=Percentage);

/*
 * Normal
 */
NormalDistribution:
	distr='NormalDistribution(' (name=ID) ')' (normDistStd=NormalDistrStandardeviation | mean=NormalDistrMean);

NormalDistrStandardeviation:
	stdDev='.standDev()';

NormalDistrMean:
	mean='.mean()';

/*
 * Bernoulli
 */
BernoulliDistribution:
	distr='BernoulliDistribution(' (name=ID) ')' (bernProb=ProbabilityBernoulli | bernTrials=TrialsBernoulli);

TrialsBernoulli:
	trials='.trials()';

ProbabilityBernoulli:
	probBern='.prob()';

/**
 * Gamma Distribution
 */
GammaDistribution:
	distr='GammaDistribution(' (name=ID) ')' (gammaK=kGamma | gammaMean=GammaMean);

kGamma:
	k='.k()';

GammaMean:
	mean='.mean()';

/*
 * Uniform distribution
 */
UniformDistribution:
	distr='UniformDistribution(' (name=ID) ')' (uniformMin=UniformMin | uniformMax=UniformMax);

UniformMin:
	min='.min()';

UniformMax:
	max='.max()';

Percentage:
	distr='Percentage(' (name=ID) ')' (valuePer=ValuePer);

ValuePer:
	value='.value()';

UncertaintyVagueness:
	(fuzzySetCut=FuzzySetCut | fuzzyLogic=FuzzyLogic | fuzzySet=FuzzySet | intervalValuedFuzzySet=IntervalValuedFuzzySet
	| lFuzzySet=LFuzzySet | intuitionisticFuzzySet=IntuitionisticFuzzySet | vagueSet=VagueSet |
	fuzzyInterval=FuzzyInterval
	| triangularFuzzyNumber=TriangularFuzzyNumber | roughSet=RoughSet | sharpness=Sharpness
	| fuzzyLogicOperation=FuzzyLogicOperation | fuzzySetCutKind=FuzzySetCutKind |
	fuzzySetOperationKind=FuzzySetOperationKind
	| hedgeKind=HedgeKind | enumerationFuzziness=EnumerationFuzziness);

/*
 * FuzzySetCut
 */
FuzzySetCut:
	distr='FuzzySetCut(' (name=ID) ')' (fuzzySetCutLam=FuzzySetCutLam | fuzzySetCutisStr=FuzzySetCutisStr |
	fuzzySetCutkin=FuzzySetCutkin);

FuzzySetCutLam:
	lambda='.lambda()'
	(LamEqualValue=Same)?
	('==' LamValu=DOUBLE)?;

FuzzySetCutisStr:
	isStrong='.isStrong()';

FuzzySetCutkin:
	kind='.kind()';

/*
 * FuzzySetCutKind
 */
enum FuzzySetCutKind:
	supp='Supp' |
	ker='Ker' |
	bd='Bd';

/*
 * FuzzyLogic
 */
FuzzyLogic:
	distr='FuzzyLogic(' (name=ID) ')' (fuzzyLogicOpera=FuzzyLogicOpera | fuzzyLogicVar=FuzzyLogicVar |
	fuzzyLogicSet=FuzzyLogicSet);

FuzzyLogicOpera:
	operator='.operator()';

FuzzyLogicVar:
	var='.var()';

FuzzyLogicSet:
	set='.set'
	(FLSmembershipDegree=MembershipDegree |
	FLSfuzziness=Fuzziness |
	FLSfuzzyEntropy=FuzzyEntropy |
	FLSroughness=Roughness);

/*
 * FuzzyLogicOperation
 */
enum FuzzyLogicOperation:
	FA='AND' |
	FO='OR' |
	FN='NOT';

/*
 * FuzzySet
 */
FuzzySet:
	distr='FuzzySet(' (name=ID) ')'
	(FSmembershipDegree=MembershipDegree |
	FSfuzziness=Fuzziness |
	FSfuzzyEntropy=FuzzyEntropy |
	FSroughness=Roughness);

/*
 * IntervalValuedFuzzySet
 */
IntervalValuedFuzzySet:
	distr='IntervalValuedFuzzySet(' (name=ID) ')'
	(IVFmembershipDegree=MembershipDegree |
	IVFfuzziness=Fuzziness |
	IVFfuzzyEntropy=FuzzyEntropy |
	IVFroughness=Roughness);

/*
 * LFuzzySet
 */
LFuzzySet:
	distr='LFuzzySet(' (name=ID) ')'
	(LFSmembershipDegree=MembershipDegree |
	LFSfuzziness=Fuzziness |
	LFSfuzzyEntropy=FuzzyEntropy |
	LFSroughness=Roughness);

/*
 * IntuitionisticFuzzySet
 */
IntuitionisticFuzzySet:
	distr='IntuitionisticFuzzySet(' (name=ID) ')'
	(IFmembershipDegree=MembershipDegree |
	IFfuzziness=Fuzziness |
	IFfuzzyEntropy=FuzzyEntropy |
	IFroughness=Roughness);

/*
 * VagueSet
 */
VagueSet:
	distr='VagueSet(' (name=ID) ')'
	(VSmembershipDegree=MembershipDegree |
	VSfuzziness=Fuzziness |
	VSfuzzyEntropy=FuzzyEntropy |
	VSroughness=Roughness);

/*
 * MembershipDegree
 */
MembershipDegree:
	distr='.MembershipDegree(' (name=ID) ')' (membershipDegreeValue=MembershipDegreeValue |
	membershipDegreeHedge=MembershipDegreeHedge | membershipDegreeElement=MembershipDegreeElement);

MembershipDegreeValue:
	value='.value()'
	(equalValue=Same)?
	('==' valu=DOUBLE)?;

MembershipDegreeHedge:
	hedge='.hedge()';

/*
 * HedgeKind
 */
enum HedgeKind:
	aLittle='A_Little' |
	slightly='Slightly' |
	very='Very' |
	extremely='Extremely' |
	veryvery='Very_Very' |
	moreOrLess='More_or_Less' |
	somewhat='Somewhat' |
	indeed='Indeed';

MembershipDegreeElement:
	element='.element()';

/*
 * Fuzziness
 */
Fuzziness:
	distr='.Fuzziness';

enum EnumerationFuzziness:
	euclid='EuclidFuzziness' |
	hamming='HammingFuzziness' |
	minkowski='MinkowskiFuzziness';

/*
 * FuzzyEntropy
 */
FuzzyEntropy:
	distr='.FuzzyEntropy';

/*
 * Roughness
 */
Roughness:
	distr='.Roughness';

/*
 * FuzzyInterval
 */
FuzzyInterval:
	distr='FuzzyInterval(' (name=ID) ')'
	('.min'minfuzzyNumber=FuzzyNumber | '.max'maxfuzzyNumber=FuzzyNumber);

/*
 * FuzzyNumber
 */
FuzzyNumber:
	number='.number()';

/*
 * TriangularFuzzyNumber
 */
TriangularFuzzyNumber:
	distr='TriangularFuzzyNumber(' (name=ID) ')' (triangularFuzzyNumberisSha=TriangularFuzzyNumberisSha |
	triangularFuzzyNumbera=TriangularFuzzyNumbera
	| triangularFuzzyNumberb=TriangularFuzzyNumberb | triangularFuzzyNumberc=TriangularFuzzyNumberc |
	triangularFuzzyNumber=FuzzyNumber);

TriangularFuzzyNumberisSha:
	isSharped='.isSharped()';

TriangularFuzzyNumbera:
	a='.a()';

TriangularFuzzyNumberb:
	b='.b()';

TriangularFuzzyNumberc:
	c='.c()';

/*
 * RoughSet
 */
RoughSet:
	distr='RoughSet(' (name=ID) ')';

/*
 * Sharpness
 */
Sharpness:
	distr='Sharpness(' (name=ID) ')';

/*
 * FuzzySetOperationKind
 */
enum FuzzySetOperationKind:
	union='Union' |
	intersection='Intersection' |
	complement='Complement';

UncertaintyAmbiguity:
	(shannonEntropy=ShannonEntropy | hartleyMeasure=HartleyMeasure | alternativeMeasure=AlternativeMeasure |
	u_Uncertainty=U_Uncertainty
	| dissonanceMeasure=DissonanceMeasure | distribution=Distribution | beliefInterval=BeliefInterval
	| possibleDistribution=PossibleDistribution | pignisticDistribution=PignisticDistribution);

/*
 * ShannonEntropy
 */
ShannonEntropy:
	distr='ShannonEntropy(' (name=ID) ')' (shannonEntropyH=ShannonEntropyH);

ShannonEntropyH:
	h='.h()';

/*
 * HartleyMeasure
 */
HartleyMeasure:
	distr='HartleyMeasure(' (name=ID) ')' (hartleyMeasureH=HartleyMeasureH);

HartleyMeasureH:
	h='.h()';

/*
 * AlternativeMeasure
 */
AlternativeMeasure:
	distr='AlternativeMeasure(' (name=ID) ')' (alternativeMeasureA=AlternativeMeasureA);

AlternativeMeasureA:
	a='.a()';

/*
 * U_Uncertainty
 */
U_Uncertainty:
	distr='U_Uncertainty(' (name=ID) ')' (uUncertaintyu=UUncertaintyu);

UUncertaintyu:
	u='.u()';

/*
 * DissonanceMeasure
 */
DissonanceMeasure:
	distr='DissonanceMeasure(' (name=ID) ')'
	(dissonanceMeasureE=DissonanceMeasureE | dissonanceMeasureComplem=DissonanceMeasureComplem)?
	conflict=Conflict?;

DissonanceMeasureE:
	e='.e()';

DissonanceMeasureComplem:
	complementrary='.complementray()';

/*
 * Conflict
 */
Conflict:
	distr='.Conflict'(conflictWeight=ConflictWeight | leftdegree=Leftdegree | rightdegree=Rightdegree);

ConflictWeight:
	weight='.weight()';

Leftdegree:
	distr='.left'(leftdegree=Belief);

Rightdegree:
	distr='.right'(rightdegree=Belief);

/*
 * Distribution
 */
Distribution:
	distr='Distribution(' (name=ID) ')' (distributionExpre=DistributionExpre);

DistributionExpre:
	expression='.expression()';

/*
 * BeliefInterval
 */
BeliefInterval:
	distr='BeliefInterval(' (name=ID) ')'
	('.min'min=Belief)?
	('.max'max=Plausibility)?;

/*
 * Belief
 */
Belief:
	degree='.degree()';

/*
 * Plausibility
 */
Plausibility:
	degree='.degree()';

/*
 * PignisticDistribution
 */
PignisticDistribution:
	distr='PignisticDistribution(' (name=ID) ')' (pignisticDistributionExpre=PignisticDistributionExpre);

PignisticDistributionExpre:
	expression='.expression()';

/*
 * PossibleDistribution
 */
PossibleDistribution:
	distr='PossibleDistribution(' (name=ID) ')' (possibleDistributionExpre=PossibleDistributionExpre);

PossibleDistributionExpre:
	expression='.expression()';
